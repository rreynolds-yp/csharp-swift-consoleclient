<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContractViolation_CannotBeDefault" xml:space="preserve">
    <value>cannot be default</value>
    <comment>contract violation snippet</comment>
  </data>
  <data name="ContractViolation_CannotBeEmpty" xml:space="preserve">
    <value>cannot be empty</value>
  </data>
  <data name="ContractViolation_CannotBeNull" xml:space="preserve">
    <value>cannot be null</value>
  </data>
  <data name="ContractViolation_ConsiderIsDefault" xml:space="preserve">
    <value>IsNull() is not a valid contract for value types. Consider IsDefault() instead.</value>
  </data>
  <data name="ContractViolation_ConsiderIsNotDefault" xml:space="preserve">
    <value>IsNotNull() is not a valid contract for value types. Consider IsNotDefault() instead.</value>
  </data>
  <data name="ContractViolation_InvalidNumberOfTypeArguments" xml:space="preserve">
    <value>value does not contain the correct number of type arguments for {0}</value>
  </data>
  <data name="ContractViolation_MustBeAssignableFromType" xml:space="preserve">
    <value>value must be assignable from type: {0}</value>
  </data>
  <data name="ContractViolation_MustBeDefault" xml:space="preserve">
    <value>must be default value</value>
  </data>
  <data name="ContractViolation_MustBeEqualTo" xml:space="preserve">
    <value>must be equal to {0}, actual value was {1}</value>
  </data>
  <data name="ContractViolation_MustBeGreaterThan" xml:space="preserve">
    <value>must be greater than {0}, actual value was {1}</value>
  </data>
  <data name="ContractViolation_MustBeGreaterThanOrEqual" xml:space="preserve">
    <value>must be greater than or equal to {0}, actual value was {1}</value>
  </data>
  <data name="ContractViolation_MustBeInstanceOfType" xml:space="preserve">
    <value>must be an instance of {0}, actual was of type {1}</value>
  </data>
  <data name="ContractViolation_MustBeLessThan" xml:space="preserve">
    <value>must be less than {0}, actual value was {1}</value>
  </data>
  <data name="ContractViolation_MustBeLessThanOrEqual" xml:space="preserve">
    <value>must be less than or equal to {0}, actual value was {1}</value>
  </data>
  <data name="ContractViolation_MustBeNull" xml:space="preserve">
    <value>must be null</value>
  </data>
  <data name="ContractViolation_MustNotBeEqualTo" xml:space="preserve">
    <value>must be not be equal to {0}</value>
  </data>
  <data name="ContractViolation_ParamsParameterMustHaveAtLeastOneValue" xml:space="preserve">
    <value>params parameter must have at least one value</value>
  </data>
  <data name="ContractViolation_StateIsInvalid_ExpectedNotOneOf" xml:space="preserve">
    <value>value does matches an invalid state: {0}, invalid states...
{1}</value>
  </data>
  <data name="ContractViolation_StateIsInvalid_ExpectedOneOf" xml:space="preserve">
    <value>value does not match an expected state: {0}, expected one of the following...
{1}</value>
  </data>
  <data name="ContractViolation_ValueMustBeBetween" xml:space="preserve">
    <value>must be between values {0} and {1} (strict)</value>
  </data>
  <data name="ContractViolation_ValueMustBeBetweenInclusive" xml:space="preserve">
    <value>must be between values {0} and {1} (inclusive)</value>
  </data>
  <data name="ContractViolation_ValueMustBeGenericType" xml:space="preserve">
    <value>value must be a generic type: {0}</value>
  </data>
  <data name="ContractViolation_ValueMustBeGenericTypeDefinition" xml:space="preserve">
    <value>value must be a generic type definition: {0}</value>
  </data>
  <data name="Error_CleanupScopeDetectedOverlappedDispose" xml:space="preserve">
    <value>CleanupScope detected overlapped calls to the dispose method.</value>
    <comment>Thrown by CleanupScope if the Dispose method is called more than once simultaneously on multiple threads. This signifies an error in the multithreading as a scope should only be disposed once, preferrably by the original thread.</comment>
  </data>
  <data name="Error_ConfiguredTypeNotFound" xml:space="preserve">
    <value>Configured type not found: {0}</value>
  </data>
  <data name="Error_ConfigureTypeMethodNotFoundOnType" xml:space="preserve">
    <value>Types decorated with the ConfigurableTypeAttribute must contain a static method that accepts the configuration element.</value>
  </data>
  <data name="Error_ErrorDuringAssemblyLoad" xml:space="preserve">
    <value>Error_ErrorDuringAssemblyLoad</value>
  </data>
  <data name="Error_FactoryBindingTypeLoadException" xml:space="preserve">
    <value>FactoryBinding contains an type that cannot be loaded: {0}
element={2}</value>
  </data>
  <data name="Error_InvalidInstanceConfigForFactory" xml:space="preserve">
    <value>The type is not configurable with the instance config given : 
     target type = {0}
     config instance: {1}</value>
  </data>
  <data name="Error_InvalidOrIncompleteTypeReference" xml:space="preserve">
    <value>Type could not be loaded; type name was either invalid or incomplete: {0}</value>
  </data>
  <data name="Error_MemoryBoundaryDetectedOverlappedDispose" xml:space="preserve">
    <value>MemoryBoundary detected overlapped calls to the dispose method.</value>
    <comment>Thrown by MemoryBoundary if the Dispose method is called more than once simultaneously on multiple threads. This signifies an error in the multithreading as a boundary should only be disposed once, preferrably by the original thread.</comment>
  </data>
  <data name="Error_UnhandledErrorWhileDisposingMemoryBoundary" xml:space="preserve">
    <value>An unhandled error was thrown while disposing a MemoryBoundary:
source = {0}</value>
    <comment>Thrown by MemoryBoundary if a memento's Restore method throws an uncaught exception.</comment>
  </data>
  <data name="Warning_ErrorWhileDisposingCleanupScope" xml:space="preserve">
    <value>An unhandled error was thrown while disposing a CleanupScope:
source = {0}</value>
    <comment>Thrown by CleanupScope if an object's Dispose method or a scheduled Action throws an uncaught exception.</comment>
  </data>
  <data name="Warn_FactoryCallCastCompatability" xml:space="preserve">
    <value>A factory signature exists that is cast compatible, cast the parameters to the correct type in order to avoid reflection.</value>
  </data>
  <data name="Warn_FactoryCallMissmatch" xml:space="preserve">
    <value>Factory cannot bind to a constructor matching the signature given.</value>
  </data>
  <data name="Error_ThrownFromClientListener" xml:space="preserve">
    <value>An uncaught exception was thrown during a remote call from the ClientListener: {0}</value>
  </data>
  <data name="Error_ThrownFromServerListener" xml:space="preserve">
    <value>An uncaught exception was thrown during a remote call from the ServerListener: {0}</value>
  </data>
  <data name="Error_AsyncJobCanceled" xml:space="preserve">
    <value>AsyncJob has been canceled</value>
    <comment>Error message thrown when an attempt is made to read an AsyncResult for a job that has been canceled.</comment>
  </data>
  <data name="Error_AsyncJobStateInvalidExpect" xml:space="preserve">
    <value>AsyncJobState is invalid: expected = {0}; actual = {1}</value>
    <comment>Error message thrown when an operation is called on an AsyncJob and the job is in an invalid state.</comment>
  </data>
  <data name="Error_AsyncJobUnhandledException" xml:space="preserve">
    <value>AsyncJob threw an unhandled exception, see the inner exception for details</value>
    <comment>Error message thrown when an asynchronous job thows an unhandled exception.</comment>
  </data>
  <data name="Error_AsyncResultAlreadySet" xml:space="preserve">
    <value>AsyncResult values are write-once and the value has already been set</value>
    <comment>Error message thrown when an attempt is made to rewrite a write-once AsyncResult.</comment>
  </data>
  <data name="Error_FutureValueNotAvailable" xml:space="preserve">
    <value>Future value not yet available</value>
    <comment>thrown by the Future type if the value is read before the value is available</comment>
  </data>
  <data name="Error_NotImplemented" xml:space="preserve">
    <value>The operation is not implemented by the target object</value>
    <comment>Error message thrown when a call is made to a method that has not been implemented by the derived class.</comment>
  </data>
  <data name="Error_FutureValueAlreadyHasAValue" xml:space="preserve">
    <value>Future already has a value; futures are write-once.</value>
    <comment>Thrown by Future&lt;T&gt; if attempt is made to set the value after it has already been set.</comment>
  </data>
  <data name="Error_TaskStateInvalidExpect" xml:space="preserve">
    <value>TaskState is invalid: expected = {0}; actual = {1}</value>
    <comment>Error message thrown when an operation is called on an ParallelJob and the job is in an invalid state.</comment>
  </data>
  <data name="Error_TaskUnhandledException" xml:space="preserve">
    <value>ParallelTask threw an unhandled exception, see the inner exception for details</value>
    <comment>Error message thrown when an parallel task thows an unhandled exception.</comment>
  </data>
  <data name="TaskBoundaryName" xml:space="preserve">
    <value>TaskBoundary #{0}</value>
    <comment>The name of an parallel task boundary.</comment>
  </data>
  <data name="Error_MissingConfigurationSection" xml:space="preserve">
    <value>Assert configuration section failed:
section name {0}
configuration section type = {1}</value>
  </data>
</root>