//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ATTi.Core.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ATTi.Core.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cannot be default.
        /// </summary>
        internal static string ContractViolation_CannotBeDefault {
            get {
                return ResourceManager.GetString("ContractViolation_CannotBeDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cannot be empty.
        /// </summary>
        internal static string ContractViolation_CannotBeEmpty {
            get {
                return ResourceManager.GetString("ContractViolation_CannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cannot be null.
        /// </summary>
        internal static string ContractViolation_CannotBeNull {
            get {
                return ResourceManager.GetString("ContractViolation_CannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IsNull() is not a valid contract for value types. Consider IsDefault() instead..
        /// </summary>
        internal static string ContractViolation_ConsiderIsDefault {
            get {
                return ResourceManager.GetString("ContractViolation_ConsiderIsDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IsNotNull() is not a valid contract for value types. Consider IsNotDefault() instead..
        /// </summary>
        internal static string ContractViolation_ConsiderIsNotDefault {
            get {
                return ResourceManager.GetString("ContractViolation_ConsiderIsNotDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to value does not contain the correct number of type arguments for {0}.
        /// </summary>
        internal static string ContractViolation_InvalidNumberOfTypeArguments {
            get {
                return ResourceManager.GetString("ContractViolation_InvalidNumberOfTypeArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to value must be assignable from type: {0}.
        /// </summary>
        internal static string ContractViolation_MustBeAssignableFromType {
            get {
                return ResourceManager.GetString("ContractViolation_MustBeAssignableFromType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be default value.
        /// </summary>
        internal static string ContractViolation_MustBeDefault {
            get {
                return ResourceManager.GetString("ContractViolation_MustBeDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be equal to {0}, actual value was {1}.
        /// </summary>
        internal static string ContractViolation_MustBeEqualTo {
            get {
                return ResourceManager.GetString("ContractViolation_MustBeEqualTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be greater than {0}, actual value was {1}.
        /// </summary>
        internal static string ContractViolation_MustBeGreaterThan {
            get {
                return ResourceManager.GetString("ContractViolation_MustBeGreaterThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be greater than or equal to {0}, actual value was {1}.
        /// </summary>
        internal static string ContractViolation_MustBeGreaterThanOrEqual {
            get {
                return ResourceManager.GetString("ContractViolation_MustBeGreaterThanOrEqual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be an instance of {0}, actual was of type {1}.
        /// </summary>
        internal static string ContractViolation_MustBeInstanceOfType {
            get {
                return ResourceManager.GetString("ContractViolation_MustBeInstanceOfType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be less than {0}, actual value was {1}.
        /// </summary>
        internal static string ContractViolation_MustBeLessThan {
            get {
                return ResourceManager.GetString("ContractViolation_MustBeLessThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be less than or equal to {0}, actual value was {1}.
        /// </summary>
        internal static string ContractViolation_MustBeLessThanOrEqual {
            get {
                return ResourceManager.GetString("ContractViolation_MustBeLessThanOrEqual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be null.
        /// </summary>
        internal static string ContractViolation_MustBeNull {
            get {
                return ResourceManager.GetString("ContractViolation_MustBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be not be equal to {0}.
        /// </summary>
        internal static string ContractViolation_MustNotBeEqualTo {
            get {
                return ResourceManager.GetString("ContractViolation_MustNotBeEqualTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to params parameter must have at least one value.
        /// </summary>
        internal static string ContractViolation_ParamsParameterMustHaveAtLeastOneValue {
            get {
                return ResourceManager.GetString("ContractViolation_ParamsParameterMustHaveAtLeastOneValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to value does matches an invalid state: {0}, invalid states...
        ///{1}.
        /// </summary>
        internal static string ContractViolation_StateIsInvalid_ExpectedNotOneOf {
            get {
                return ResourceManager.GetString("ContractViolation_StateIsInvalid_ExpectedNotOneOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to value does not match an expected state: {0}, expected one of the following...
        ///{1}.
        /// </summary>
        internal static string ContractViolation_StateIsInvalid_ExpectedOneOf {
            get {
                return ResourceManager.GetString("ContractViolation_StateIsInvalid_ExpectedOneOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be between values {0} and {1} (strict).
        /// </summary>
        internal static string ContractViolation_ValueMustBeBetween {
            get {
                return ResourceManager.GetString("ContractViolation_ValueMustBeBetween", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to must be between values {0} and {1} (inclusive).
        /// </summary>
        internal static string ContractViolation_ValueMustBeBetweenInclusive {
            get {
                return ResourceManager.GetString("ContractViolation_ValueMustBeBetweenInclusive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to value must be a generic type: {0}.
        /// </summary>
        internal static string ContractViolation_ValueMustBeGenericType {
            get {
                return ResourceManager.GetString("ContractViolation_ValueMustBeGenericType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to value must be a generic type definition: {0}.
        /// </summary>
        internal static string ContractViolation_ValueMustBeGenericTypeDefinition {
            get {
                return ResourceManager.GetString("ContractViolation_ValueMustBeGenericTypeDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsyncJob has been canceled.
        /// </summary>
        internal static string Error_AsyncJobCanceled {
            get {
                return ResourceManager.GetString("Error_AsyncJobCanceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsyncJobState is invalid: expected = {0}; actual = {1}.
        /// </summary>
        internal static string Error_AsyncJobStateInvalidExpect {
            get {
                return ResourceManager.GetString("Error_AsyncJobStateInvalidExpect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsyncJob threw an unhandled exception, see the inner exception for details.
        /// </summary>
        internal static string Error_AsyncJobUnhandledException {
            get {
                return ResourceManager.GetString("Error_AsyncJobUnhandledException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsyncResult values are write-once and the value has already been set.
        /// </summary>
        internal static string Error_AsyncResultAlreadySet {
            get {
                return ResourceManager.GetString("Error_AsyncResultAlreadySet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CleanupScope detected overlapped calls to the dispose method..
        /// </summary>
        internal static string Error_CleanupScopeDetectedOverlappedDispose {
            get {
                return ResourceManager.GetString("Error_CleanupScopeDetectedOverlappedDispose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configured type not found: {0}.
        /// </summary>
        internal static string Error_ConfiguredTypeNotFound {
            get {
                return ResourceManager.GetString("Error_ConfiguredTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types decorated with the ConfigurableTypeAttribute must contain a static method that accepts the configuration element..
        /// </summary>
        internal static string Error_ConfigureTypeMethodNotFoundOnType {
            get {
                return ResourceManager.GetString("Error_ConfigureTypeMethodNotFoundOnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error_ErrorDuringAssemblyLoad.
        /// </summary>
        internal static string Error_ErrorDuringAssemblyLoad {
            get {
                return ResourceManager.GetString("Error_ErrorDuringAssemblyLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FactoryBinding contains an type that cannot be loaded: {0}
        ///element={2}.
        /// </summary>
        internal static string Error_FactoryBindingTypeLoadException {
            get {
                return ResourceManager.GetString("Error_FactoryBindingTypeLoadException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Future already has a value; futures are write-once..
        /// </summary>
        internal static string Error_FutureValueAlreadyHasAValue {
            get {
                return ResourceManager.GetString("Error_FutureValueAlreadyHasAValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Future value not yet available.
        /// </summary>
        internal static string Error_FutureValueNotAvailable {
            get {
                return ResourceManager.GetString("Error_FutureValueNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type is not configurable with the instance config given : 
        ///     target type = {0}
        ///     config instance: {1}.
        /// </summary>
        internal static string Error_InvalidInstanceConfigForFactory {
            get {
                return ResourceManager.GetString("Error_InvalidInstanceConfigForFactory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type could not be loaded; type name was either invalid or incomplete: {0}.
        /// </summary>
        internal static string Error_InvalidOrIncompleteTypeReference {
            get {
                return ResourceManager.GetString("Error_InvalidOrIncompleteTypeReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MemoryBoundary detected overlapped calls to the dispose method..
        /// </summary>
        internal static string Error_MemoryBoundaryDetectedOverlappedDispose {
            get {
                return ResourceManager.GetString("Error_MemoryBoundaryDetectedOverlappedDispose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assert configuration section failed:
        ///section name {0}
        ///configuration section type = {1}.
        /// </summary>
        internal static string Error_MissingConfigurationSection {
            get {
                return ResourceManager.GetString("Error_MissingConfigurationSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not implemented by the target object.
        /// </summary>
        internal static string Error_NotImplemented {
            get {
                return ResourceManager.GetString("Error_NotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TaskState is invalid: expected = {0}; actual = {1}.
        /// </summary>
        internal static string Error_TaskStateInvalidExpect {
            get {
                return ResourceManager.GetString("Error_TaskStateInvalidExpect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ParallelTask threw an unhandled exception, see the inner exception for details.
        /// </summary>
        internal static string Error_TaskUnhandledException {
            get {
                return ResourceManager.GetString("Error_TaskUnhandledException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An uncaught exception was thrown during a remote call from the ClientListener: {0}.
        /// </summary>
        internal static string Error_ThrownFromClientListener {
            get {
                return ResourceManager.GetString("Error_ThrownFromClientListener", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An uncaught exception was thrown during a remote call from the ServerListener: {0}.
        /// </summary>
        internal static string Error_ThrownFromServerListener {
            get {
                return ResourceManager.GetString("Error_ThrownFromServerListener", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unhandled error was thrown while disposing a MemoryBoundary:
        ///source = {0}.
        /// </summary>
        internal static string Error_UnhandledErrorWhileDisposingMemoryBoundary {
            get {
                return ResourceManager.GetString("Error_UnhandledErrorWhileDisposingMemoryBoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TaskBoundary #{0}.
        /// </summary>
        internal static string TaskBoundaryName {
            get {
                return ResourceManager.GetString("TaskBoundaryName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A factory signature exists that is cast compatible, cast the parameters to the correct type in order to avoid reflection..
        /// </summary>
        internal static string Warn_FactoryCallCastCompatability {
            get {
                return ResourceManager.GetString("Warn_FactoryCallCastCompatability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Factory cannot bind to a constructor matching the signature given..
        /// </summary>
        internal static string Warn_FactoryCallMissmatch {
            get {
                return ResourceManager.GetString("Warn_FactoryCallMissmatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unhandled error was thrown while disposing a CleanupScope:
        ///source = {0}.
        /// </summary>
        internal static string Warning_ErrorWhileDisposingCleanupScope {
            get {
                return ResourceManager.GetString("Warning_ErrorWhileDisposingCleanupScope", resourceCulture);
            }
        }
    }
}
